import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class Test {

	public static void main(String[] args) {
		/*
		주어진 문자열 "hi, my name is tom. nice to meet you" 에서
		각 문자의 등장 횟수와 가장 많이 등장한 문자 모두를 출력하는 프로그램을 작성하시오. (20점)
		단, 가장 많이 등장한 문자를 출력할 때, 공백은 제외한다.
		출력예시) e : 6, d: 6
		 */
		String str = "hi, my name is tom. nice to meet you";
		
		// 문자별 등장 횟수를 저장할 Map 객체
		Map<Character, Integer> charCountMap = new HashMap<Character, Integer>();
		
		// 문자열을 char[] 타입으로 변환하여 반복
//		for(char ch : str.toCharArray()) {
//			// 공백 제외
//			if(ch == ' ') continue;
//				
//			// 주어진 문자에 해당하는 키를 통해 값(등장 횟수)을 가져오는데
//			// 해당 키에 대한 값이 없을 경우 null 대신 0 을 지정하기 위해 getOrDefault() 메서드 사용
//			// => 가져온 값 + 1 처리
//			charCountMap.put(ch, charCountMap.getOrDefault(ch, 0) + 1);
//		}
		
		// 반복문을 통해 매번 공백 문자를 판별하는 대신 반복 전에 미리 공백을 널스트링("") 으로 치환 후 반복 수행
		// => 복합 필터링 시에는 replaceAll() 메서드를 사용해도 되지만 오버헤드로 인한 시간 소요가 커짐
		// => 
		for(char ch : str.replace(" ", "").toCharArray()) {
			charCountMap.put(ch, charCountMap.getOrDefault(ch, 0) + 1);
		}
		
//		System.out.println(charCountMap);
		// => {a=1, c=1, e=4, h=1, i=3, ,=1, m=4, n=2, .=1, o=3, s=1, t=3, u=1, y=2}
		
		// 최대 등장 횟수 찾기
		// Map 객체 내에서 값(value)들의 모음을 추출하여 Collections.max() 메서드로 최대값 추출
		int maxCount = Collections.max(charCountMap.values());
		
		
	}

}
















