[ Spring JPA 쿼리 메서드 명명 규칙 ]
< 데이터 조회를 위한 쿼리 메서드 기본 구조  >
- find, read, query, count 와 같은 키워드로 시작하고, 속성(필드명)을 기준으로 조건을 By 뒤에 명시
- 기본 형식 예시 : findBy[속성명], findBy[속성명]And[속성명], countBy[속성명] 등
  => 속성명은 엔티티 클래스에 선언된 필드명

< 명명 규칙 >
1. 기본 검색 (단일 조건)
   - findBy[속성명] : 하나의 속성에 대해서 조회할 때 사용
     ex) List<User> findByName(String name);  // name = ? 조건으로 조회

   - findBy[속성명]And[속성명] : 여러 속성을 AND 조건으로 조회할 때 사용     
     ex) List<User> findByNameAndAge(String name, int age);  // name = ? AND age = ? 조건으로 조회

   - findBy[속성명]Or[속성명] : 여러 속성을 OR 조건으로 조회할 때 사용
     ex) List<User> findByNameOrAge(String name, int age);  // name = ? OR age = ? 조건으로 조회

2. 정렬 (OrderBy)
   - findBy[속성명]OrderBy[속성명]Asc/Desc : 속성에 대해 오름차순 (Asc) 또는 내림차순 (Desc) 정렬
     (SELECT * FROM xxx ORDER BY [정렬조건])
     ex) List<User> findByNameOrderByAgeAsc(String name);  
          // => name = ? 조건으로 조회하고, age 오름차순으로 정렬
     ex) List<User> findByNameOrderByAgeDesc(String name); 
          // => name = ? 조건으로 조회하고, age 내림차순으로 정렬

3️. 범위 조건 (Between)
   - findBy[속성명]Between[값1]And[값2] : 두 값 사이의 범위 조회
     ex) List<User> findByAgeBetween(int startAge, int endAge);  // age BETWEEN ? AND ? 조건으로 조회

4. Null 값 조건 (IsNull, IsNotNull)
   - findBy[속성명]IsNull : 해당 속성이 null인 값 조회
     ex) List<User> findByEmailIsNull();  // email이 null인 데이터를 조회

   - findBy[속성명]IsNotNull : 해당 속성이 null이 아닌 값 조회
     ex) List<User> findByEmailIsNotNull();  // email이 null이 아닌 데이터를 조회

5. Like 조건 (Containing, StartingWith, EndingWith)
   - findBy[속성명]Containing[값] : 문자열 내에 특정 값을 포함하는 데이터 조회 (SQL LIKE '%value%'와 동일)
     ex) List<User> findByNameContaining(String name);  // name에 특정 문자열을 포함하는 데이터를 조회

   - findBy[속성명]StartingWith[값] : 문자열로 시작하는 데이터 조회 (SQL LIKE 'value%'와 동일)
     ex) List<User> findByNameStartingWith(String name);  // name이 특정 문자열로 시작하는 데이터를 조회

   - findBy[속성명]EndingWith[값] : 문자열로 끝나는 데이터 조회 (SQL LIKE '%value'와 동일)
     ex) List<User> findByNameEndingWith(String name);  // name이 특정 문자열로 끝나는 데이터를 조회

6. 대소문자 구분 조건 (IgnoreCase)
   - findBy[속성명]IgnoreCase : 대소문자 구분 없이 조회
     ex) List<User> findByNameIgnoreCase(String name);  // 대소문자 구분 없이 name 조회

7. 개수 조회 (Count)
   - countBy[속성명] : 조건에 맞는 개수를 반환
     ex) long countByName(String name);  // name이 주어진 값과 일치하는 데이터의 개수를 반환

8. Exists 조건 (Exists)
   - existsBy[속성명] : 조건에 맞는 데이터가 존재하는지 여부 확인
     ex) boolean existsByEmail(String email);  // email이 주어진 값과 일치하는 데이터가 존재하는지 확인

< 복합 조건 예시 >
1. AND 및 OR 복합 조건
   - findBy[속성명]And[속성명] : AND 조건으로 필터링
     ex) List<User> findByNameAndAge(String name, int age);

   - findBy[속성명]Or[속성명] : OR 조건으로 필터링
     ex) List<User> findByNameOrAge(String name, int age);

2. Not을 사용한 조건
   - findBy[속성명]Not[값] : 특정 값이 아닌 데이터를 조회
     ex) List<User> findByNameNot(String name);  // name이 특정 값이 아닌 데이터를 조회

< 연습 문제 >
1. 문자열 name 값으로 User 엔티티 조회
   => List<User> findByName(String name);
      Optional<User> findByName(String name);


2. 문자열 name 값과 일치하고, 정수 age 값이 일치하지 않는 User 엔티티 조회
   => List<User> findByNameAgeNot(String name, Integer age);


3. 문자열 name 값을 조회하여 age 값 기준 오름차순 정렬
   => List<User> findByNameOrderByAgeAsc(String name);


4. 문자열 name 값과 정수 age 값이 모두 일치하는 User 엔티티 조회
   (단, age 컬럼값을 startAge ~ endAge 범위로 지정)
   => List<User> findByNameAndAgeBetween(String name, Integer startAge, Integer endAge);
   